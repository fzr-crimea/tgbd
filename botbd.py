from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import sqlite3
import os
from datetime import datetime

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = "bot_database.db"

# –í–∞—à user_id (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID)
ADMIN_USER_ID = 154554550  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à user_id

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [["–ü—Ä–æ–¥—É–∫—Ü–∏—è", "–ü—Ä–∞–π—Å –ª–∏—Å—Ç"], ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]]

# –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏
PRODUCT_MENU = [["–†—ã–±–∞", "–ú—è—Å–æ"], ["–ù–∞–∑–∞–¥"]]

# –ú–µ–Ω—é –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
PRICE_MENU = [["–°—Ç–∞—Ä—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç", "–ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã", "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å"], ["–ù–∞–∑–∞–¥"]]

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def create_database():
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            category TEXT NOT NULL
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            price_type TEXT NOT NULL
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_actions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            action TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bot_usage (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            total_users INTEGER DEFAULT 0,
            total_messages INTEGER DEFAULT 0,
            last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–õ–æ—Å–æ—Å—å", "–†—ã–±–∞"),
            ("–§–æ—Ä–µ–ª—å", "–†—ã–±–∞"),
            ("–ì–æ–≤—è–¥–∏–Ω–∞", "–ú—è—Å–æ"),
            ("–°–≤–∏–Ω–∏–Ω–∞", "–ú—è—Å–æ")
        ]
        cursor.executemany("INSERT INTO products (name, category) VALUES (?, ?)", products)

    cursor.execute("SELECT COUNT(*) FROM prices")
    if cursor.fetchone()[0] == 0:
        prices = [
            ("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç 2022", "–°—Ç–∞—Ä—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"),
            ("–ê–∫—Ü–∏–∏ –Ω–∞ —Ä—ã–±—É", "–ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã"),
            ("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç 2023", "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å")
        ]
        cursor.executemany("INSERT INTO prices (name, price_type) VALUES (?, ?)", prices)

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
def get_products(category: str):
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM products WHERE category = ?", (category,))
    products = cursor.fetchall()
    conn.close()
    return [product[0] for product in products]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices
def get_prices(price_type: str):
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM prices WHERE price_type = ?", (price_type,))
    prices = cursor.fetchall()
    conn.close()
    return [price[0] for price in prices]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_action(user_id: int, action: str):
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO user_actions (user_id, action) VALUES (?, ?)", (user_id, action))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def update_bot_usage():
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM user_actions")
    total_users = cursor.fetchone()[0]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute("SELECT COUNT(*) FROM user_actions")
    total_messages = cursor.fetchone()[0]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ bot_usage
    cursor.execute("""
        INSERT INTO bot_usage (total_users, total_messages)
        VALUES (?, ?)
        ON CONFLICT(id) DO UPDATE SET
            total_users = excluded.total_users,
            total_messages = excluded.total_messages,
            last_updated = CURRENT_TIMESTAMP
    """, (total_users, total_messages))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_bot_stats():
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT total_users FROM bot_usage")
    total_users = cursor.fetchone()[0]

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute("SELECT total_messages FROM bot_usage")
    total_messages = cursor.fetchone()[0]

    # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    cursor.execute("SELECT action, COUNT(*) as count FROM user_actions GROUP BY action ORDER BY count DESC LIMIT 5")
    top_actions = cursor.fetchall()

    conn.close()
    return total_users, total_messages, top_actions

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    log_user_action(user_id, "start")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    update_bot_usage()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    with open("12.png", "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, one_time_keyboard=True, resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_action(user_id, f"button_pressed:{text}")
    update_bot_usage()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if text == "–ü—Ä–æ–¥—É–∫—Ü–∏—è":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=ReplyKeyboardMarkup(PRODUCT_MENU, one_time_keyboard=True, resize_keyboard=True)
        )
    elif text == "–ü—Ä–∞–π—Å –ª–∏—Å—Ç":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(PRICE_MENU, one_time_keyboard=True, resize_keyboard=True)
        )
    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, one_time_keyboard=True, resize_keyboard=True)
        )
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        if user_id == ADMIN_USER_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            total_users, total_messages, top_actions = get_bot_stats()
            stats_message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
                f"üöÄ –¢–æ–ø-5 –¥–µ–π—Å—Ç–≤–∏–π:\n"
            )
            for action, count in top_actions:
                stats_message += f"- {action}: {count} —Ä–∞–∑\n"
            await update.message.reply_text(
                stats_message,
                reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
        else:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.",
                reply_markup=ReplyKeyboardMarkup(MAIN_MENU, one_time_keyboard=True, resize_keyboard=True)
            )
    elif text in ["–†—ã–±–∞", "–ú—è—Å–æ"]:
        products = get_products(text)
        await update.message.reply_text(
            f"–ü—Ä–æ–¥—É–∫—Ü–∏—è ({text}):\n" + "\n".join(products),
            reply_markup=ReplyKeyboardMarkup(PRODUCT_MENU, one_time_keyboard=True, resize_keyboard=True)
        )
    elif text == "–°—Ç–∞—Ä—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª old.txt
        with open("old.txt", "rb") as file:
            await update.message.reply_document(
                document=file,
                caption="–°—Ç–∞—Ä—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç",
                reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
    elif text in ["–ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã", "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å"]:
        prices = get_prices(text)
        await update.message.reply_text(
            f"–ü—Ä–∞–π—Å-–ª–∏—Å—Ç ({text}):\n" + "\n".join(prices),
            reply_markup=ReplyKeyboardMarkup(PRICE_MENU, one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, one_time_keyboard=True, resize_keyboard=True)
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    create_database()

    # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token("8193222159:AAGQZOam4mhgwGdyQF_xcdaflqO6XY9rrn0").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()